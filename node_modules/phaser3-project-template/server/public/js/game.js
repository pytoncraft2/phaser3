var config = {
  type: Phaser.AUTO,
  parent: 'phaser-example',
  width: 1500,
  height: 720,
  scene: {
    preload: preload,
    create: create,
    update: update
  }
};

var game = new Phaser.Game(config);

function preload() {

  this.load.atlas('tests', ' http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/tests/final.png', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/tests/final.json');
  this.load.image('bg', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/bg.png');
  this.load.spritesheet('autres', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/kicksAttackAutre.png', {
    frameWidth: 752.5,
    frameHeight: 1050,
    endFrame: 6
  });
  this.load.spritesheet('perso', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/kicksAttack.png', {
    frameWidth: 752.5,
    frameHeight: 1050,
    endFrame: 6
  });

    this.load.spritesheet('face', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/front.png', {
    frameWidth: 752.5,
    frameHeight: 1050,
    endFrame: 6
  });

    this.load.spritesheet('walk', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/marche.png', {
    frameWidth: 762.5,
    frameHeight: 1050,
    endFrame: 6
  });

}

function create() {

  var self = this;

  this.anims.create({
  key: "perso_anim",
  frames: this.anims.generateFrameNumbers('perso', {frames: [0,1,2,3]}),
  frameRate: 6,
  repeat: 0
});

  this.anims.create({
  key: "front",
  frames: this.anims.generateFrameNumbers('face', {frames: [0,1,2,3]}),
  frameRate: 6,
  repeat: 0
});

  this.anims.create({
  key: "walk",
  frames: this.anims.generateFrameNumbers('walk', {frames: [0,1]}),
  frameRate: 2,
  repeat: 0
});

  this.add.image(750, 350, 'bg');


  /*
  this.anims.create({
    key: "perso_anim",
    frames: this.anims.generateFrameNumbers('perso', {}),
    frameRate: 6,
    repeat: 0
  });
  this.anims.create({
    key: "autres_anim",
    frames: this.anims.generateFrameNumbers('autres', {}),
    frameRate: 6,
    repeat: 0
  });
  */



  this.socket = io();
  this.players = this.add.group();
  // this.anims.play('perso_anim',true);

  this.socket.on('currentPlayers', function (players) {
    Object.keys(players).forEach(function (id) {
      players[id].playerId === self.socket.id ? displayPlayers(self, players[id], 'perso')
      : displayPlayers(self, players[id], 'autres')
    });
  });

  this.socket.on('newPlayer', function (playerInfo) {
    displayPlayers(self, playerInfo, 'autres');
  });

  this.socket.on('disconnect', function (playerId) {
    self.players.getChildren().forEach(function (player) {
      if (playerId === player.playerId) player.destroy();
    });
  });

  this.socket.on('playerUpdates', function (players) {
    Object.keys(players).forEach(function (id) {
      self.players.getChildren().forEach(function (player) {
        if (players[id].playerId === player.playerId) {

          //modifie sprite
          player.flipX = (players[id].flipX);
          player.setScale(players[id].scale);
          player.setPosition(players[id].x, players[id].y);
          // console.log(players[id].anim);
          if (players[id].anim) {
            player.play(''+players[id].anim+'',5);
          }

          // player.play('perso_anim',players[id].anims);
        }
      });
    });
  });

  this.cursors = this.input.keyboard.createCursorKeys();
  this.leftKeyPressed = false;
  this.rightKeyPressed = false;
  this.upKeyPressed = false;
  this.downKeyPressed = false;
  this.aKey = false;

  // this.aKeyPressed = this.input.keyboard.addKey('A');  // Get key object
  this.input.keyboard.on('keydown-A', function (event) {
    console.log('Hello from the B Key!');
    this.aKey = true;
},this);
  this.input.keyboard.on('keyup-A', function (event) {
    console.log('Bye from the B Key!');
    this.aKey = false;
},this);
}


function update() {
  // if (this.player) console.log(this.player);
  const left = this.leftKeyPressed,
        right = this.rightKeyPressed,
        up = this.upKeyPressed,
        down = this.downKeyPressed;
        // a = this.aKeyPressed;
        a = this.aKey;

this.cursors.left.isDown ? this.leftKeyPressed = true
: this.cursors.right.isDown ? this.rightKeyPressed = true
: (this.leftKeyPressed = false ,this.rightKeyPressed = false)

this.cursors.up.isDown ? this.upKeyPressed = true
: this.cursors.down.isDown ? this.downKeyPressed = true
: (this.upKeyPressed = false, this.downKeyPressed = false)

// console.log(this.aKeyPressed);
// console.log(this.aKey);
// this.aKeyPressed.isDown ? this.aKey = true
// : this.aKey = false

// console.log(this.aKeyPressed.isDown);


  if (left !== this.leftKeyPressed || right !== this.rightKeyPressed || up !== this.upKeyPressed || down !== this.downKeyPressed || a !== this.aKey) {
    this.socket.emit('playerInput', { left: this.leftKeyPressed , right: this.rightKeyPressed, up: this.upKeyPressed , down: this.downKeyPressed , a: this.aKey});
  }
}

function displayPlayers(self, playerInfo, sprite) {
  self.player = self.add.sprite(playerInfo.x, playerInfo.y, sprite).setScale(0.38)/*.setOrigin(0.5, 0.5).setDisplaySize(368, 496)*/;
  self.player.playerId = playerInfo.playerId;
  // self.player.play('perso_anim');
  self.players.add(self.player);
}
