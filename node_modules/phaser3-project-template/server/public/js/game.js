var config = {
  type: Phaser.AUTO,
  parent: 'phaser-example',
  width: 1500,
  height: 720,
  scene: {
    preload: preload,
    create: create,
    update: update
  }
};

var game = new Phaser.Game(config);

function preload() {



  this.load.atlas('atlas', ' http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/resized/resized.png', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/resized/resized_atlas.json');
  this.load.image('bg', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/bg.png');
  /*
  this.load.spritesheet('autres', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/kicksAttackAutre.png', {
    frameWidth: 752.5,
    frameHeight: 1050,
    endFrame: 6
  });
  this.load.spritesheet('perso', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/kicksAttack.png', {
    frameWidth: 752.5,
    frameHeight: 1050,
    endFrame: 6
  });

    this.load.spritesheet('face', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/front.png', {
    frameWidth: 752.5,
    frameHeight: 1050,
    endFrame: 6
  });

    this.load.spritesheet('walk', 'http://localhost/phaser3/node_modules/phaser3-project-template/server/authoritative_server/assets/marche.png', {
    frameWidth: 752.5,
    frameHeight: 1050,
    endFrame: 6
  });
  */

}

function create() {

  var self = this;
  // var sprite = this.add.sprite(100,200,"atlas","pas_fin");
  /*
  this.anims.create({
    key: 'front',
    frames: this.anims.generateFrameNames('atlas', {
      prefix: 'position_jkd_kick3',
      end: 3
    }),
    repeat: 1
  });
  */
/*
  this.anims.create({
    key: 'walk',
    frames: this.anims.generateFrameNames('sea', {
      prefix: 'crab1',
      end: 25,
      zeroPad: 4
    }),
    repeat: -1
  });
  */

  // const jellyfish = this.add.sprite(400, 300, 'seacreatures').play('jellyfish');
  // const bigCrab = this.add.sprite(550, 480, 'seacreatures').setOrigin(0).play('crab');
  /*
    this.anims.create({
    key: "perso_anim",
    frames: this.anims.generateFrameNumbers('perso', {frames: [0,1,2,3,0]}),
    frameRate: 6,
    repeat: 0
  });
  */
/*
    this.anims.create({
    key: "front",
    frames: this.anims.generateFrameNumbers('atlas', {frames: ['dos','position_jkd_kick1']}),
    frameRate: 6,
    repeat: 0
  });
  */
  /*

    this.anims.create({
    key: "walk",
    frames: this.anims.generateFrameNumbers('walk', {frames: [0,1]}),
    frameRate: 2,
    repeat: 0
  });
  */

  this.add.image(750, 350, 'bg');

this.add.sprite(550, 180, 'atlas', 'dos').setOrigin(0)

  /*
  this.anims.create({
    key: "perso_anim",
    frames: this.anims.generateFrameNumbers('perso', {}),
    frameRate: 6,
    repeat: 0
  });
  this.anims.create({
    key: "autres_anim",
    frames: this.anims.generateFrameNumbers('autres', {}),
    frameRate: 6,
    repeat: 0
  });
  */



  this.socket = io();
  this.players = this.add.group();
  // this.anims.play('perso_anim',true);

  this.socket.on('currentPlayers', function(players) {
    Object.keys(players).forEach(function(id) {
      players[id].playerId === self.socket.id ? displayPlayers(self, players[id], 'perso') :
        displayPlayers(self, players[id], 'autres')
    });
  });

  this.socket.on('newPlayer', function(playerInfo) {
    displayPlayers(self, playerInfo, 'autres');
  });

  this.socket.on('disconnect', function(playerId) {
    self.players.getChildren().forEach(function(player) {
      if (playerId === player.playerId) player.destroy();
    });
  });

  this.socket.on('playerUpdates', function(players) {
    Object.keys(players).forEach(function(id) {
      self.players.getChildren().forEach(function(player) {
        if (players[id].playerId === player.playerId) {

          //modifie sprite
          player.flipX = (players[id].flipX);
          player.setScale(players[id].scale);
          player.setPosition(players[id].x, players[id].y);
          // console.log(players[id].anim);
          if (players[id].anim && players[id].anim !== false) {
            // console.log('oui');
            player.play('' + players[id].anim + '', 5);
          }

          // player.play('perso_anim',players[id].anims);
        }
      });
    });
  });

  this.aKeyPressed = this.input.keyboard.addKey('A'); // Get key object
  this.cursors = this.input.keyboard.createCursorKeys();
  this.leftKeyPressed = false;
  this.rightKeyPressed = false;
  this.upKeyPressed = false;
  this.downKeyPressed = false;
  this.aKey = false;
  /*
    this.input.keyboard.on('keydown-A', function (event) {
      console.log('HA down');
      this.aKey = true;
  },this);
    this.input.keyboard.on('keyup-A', function (event) {
      console.log('HA down');
      this.aKey = false;
  },this);
  */
}


function update() {
  // console.log(this.aKey);
  // if (this.player) console.log(this.player);
  const left = this.leftKeyPressed,
    right = this.rightKeyPressed,
    up = this.upKeyPressed,
    down = this.downKeyPressed;
  ak = this.aKey;
  // a = this.aKeyPressed;

  this.cursors.left.isDown ? this.leftKeyPressed = true :
    this.cursors.right.isDown ? this.rightKeyPressed = true :
    (this.leftKeyPressed = false, this.rightKeyPressed = false)

  this.cursors.up.isDown ? this.upKeyPressed = true :
    this.cursors.down.isDown ? this.downKeyPressed = true :
    (this.upKeyPressed = false, this.downKeyPressed = false)

  if (this.aKeyPressed.isDown) {
    // console.log("a est down");
    // console.log(ak);
    this.aKey = true;
  } else {
    //   // console.log("a est up");
    this.aKey = false;
  }
  // console.log(this.aKeyPressed);
  // console.log(this.aKey);
  // this.aKeyPressed.isDown ? this.aKey = true
  // : this.aKey = false

  // console.log(this.aKeyPressed.isDown);


  if (left !== this.leftKeyPressed || right !== this.rightKeyPressed || up !== this.upKeyPressed || down !== this.downKeyPressed || ak !== this.aKey) {
    this.socket.emit('playerInput', {
      left: this.leftKeyPressed,
      right: this.rightKeyPressed,
      up: this.upKeyPressed,
      down: this.downKeyPressed,
      a: this.aKey
    });
    // console.log(this.aKey);
    // console.log(this.aKeyPressed);
    // console.log(ak);
    // console.log(this.aKeyPressed.isDown);
  }
}

function displayPlayers(self, playerInfo, sprite) {
  self.player = self.add.sprite(playerInfo.x, playerInfo.y, sprite).setScale(0.38) /*.setOrigin(0.5, 0.5).setDisplaySize(368, 496)*/ ;
  self.player.playerId = playerInfo.playerId;
  // self.player.play('perso_anim');
  self.players.add(self.player);
}
