class Chambre extends Phaser.Scene {
  //identifiant
  constructor() {
    super({
      key: "Chambre"
    });
    this.nom = "";
  }
  preload() {
    this.load.image('bg', 'http://localhost/phaser3/node_modules/phaser3-project-template/client/src/assets/bg.png');

    this.load.spritesheet('autre', 'http://localhost/phaser3/node_modules/phaser3-project-template/client/src/assets/kicksAttack.png', {
      frameWidth: 752.5,
      frameHeight: 1050,
      endFrame: 4
    });

    this.load.spritesheet('perso', 'http://localhost/phaser3/node_modules/phaser3-project-template/client/src/assets/kicksAttack.png', {
      frameWidth: 752.5,
      frameHeight: 1050,
      endFrame: 4
    });
  }

  create() {

    // var player = this.physics.add.existing(new Autre(this, 400, 100));
    this.bg = this.physics.add.image(750, 350, 'bg');
    // this.autre = this.add.sprite(750,447,"autre");
    // this.physics.add.image(0, 0, 'ship');
    // this.text = this.add.text(10,10, "Joueur:", {font: "40px Impact"});
    this.socket = io('http://localhost:3000');
    this.premierJ = false;
    this.opponentCards = [];
    self = this;

    this.socket.on('premierJ', function() {
      self.premierJ = true;
      console.log('premierJ');
      self.text = self.add.text(10, 10, "Premier joueur !", {
        font: "35px Impact"
      })
    })

    this.socket.on('init', function(nom) {
      console.log("initialisation");
      self.nom = nom;
      console.log(nom);
      // self.autre = this.add.sprite(750,447,"autre");

      self.anims.create({
        key: "autre_anim",
        frames: self.anims.generateFrameNumbers('autre', {}),
        frameRate: 6,
        repeat: 0
        // yoyo: true
      });

      // var random = Math.floor(Math.random() * 800);
      // self.autre = self.add.sprite(random,447,"autre");
      // this.socket.emit()
    console.log("le nom est: " +self.nom);

    }, this)








    // this.socket.on('connect', function () {
    //   console.log('Connected!');
    // });
    this.fix = this.add.sprite(750, 447, "perso");
    // this.fix.scale = 0.30;
    this.fix.scale = 0.38;
    this.anims.create({
      key: "perso_anim",
      frames: this.anims.generateFrameNumbers('perso', {}),
      frameRate: 6,
      repeat: 0
      // yoyo: true
    });

    this.input.keyboard.on('keyup_A', function(e) {
      this.fix.play("perso_anim");
      // console.log(this.gamename);
    }, this);

    this.key_up = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.UP);
    this.key_down = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.DOWN);
    this.key_right = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.RIGHT);
    this.key_left = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.LEFT);

    let keys = new Set();

    console.log(this.nom);
    this.input.keyboard.on('keydown', (event) => {
      if (!keys.has(event.code)) {
      // console.log('one');
        console.log(event.code);

        keys.add(event.code);
        // this.input.keyboard.emit(`keypress_${event.code}`);
        // or / and

        var commandes = {touche: event.code, joueur: this.nom};
        this.socket.emit('keypress', "+", commandes);

      }
    });

    this.input.keyboard.on('keyup', (event) => {

      // console.log('two');
        console.log(event.code);
        keys.delete(event.code);
        console.log(this.nom);
        // this.input.keyboard.emit(`keyrelease_${event.code}`);
        // or / and
        var commandes = {touche: event.code, joueur: this.nom};
        this.socket.emit('keyrelease', "-", commandes);
    },this);
  }

  update(delta) {

    if (this.fix.x < 270 && this.fix.scale > 0.31)
      this.scene.start('Rue');
/*
    if (this.key_up.isDown && this.fix.scale >= 0.223) {
      this.fix.scale = this.fix.scale - 0.003;
      // this.socket.emit('message', this.fix.scale);
      // this.fix.y += 2;
      this.fix.y -= 2;
    }

    //smaller
    if (this.key_down.isDown && this.fix.scale <= 2) {
      this.fix.scale = this.fix.scale + 0.003;
      this.fix.y += 2;
    }

    if (this.key_right.isDown) {
      this.fix.flipX = false;
      this.fix.x += 2;
    }

    if (this.key_left.isDown) {
      this.fix.flipX = true;
      this.fix.x -= 2;
    }
    */
  }
}
