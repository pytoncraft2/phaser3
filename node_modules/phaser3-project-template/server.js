const app = require('express')();
const http = require('http').Server(app);
const io = require('socket.io')(http);

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

http.listen(3000, () => {
  console.log('listening on *:3000');
});

let players = [];

io.on('connection', function(socket) {

  socket.emit('init', socket.id);

  players.push(socket.id);
  console.log(players);

  if (players.length === 1) {
    io.emit('premierJ');
  };

  socket.on('DonnesP', function(positionx, positiony, scale, id, animation) {
    console.log(positionx, positiony, scale, socket.id);
    // socket.broadcast.emit('mouvementP', positionx, positiony, currentanimation, gamename, scale);
  })

socket.on('keypress', (cle) => {
console.log('clé pressé');
});



  socket.on('command', function(command) {

    // Client must init first.
    if (!socket.name) return;

    // Determine action.
    var action = '';
    var firstChar = command.charAt(0);
    if (firstChar === '+') action = 'add';
    else if (firstChar === '-') action = 'remove';
    else throw 'Invalid command ' + command + ' from client ' + socket_id;

    // Strip first char from command.
    command = command.substr(1);

    var entity = ig.game.getEntityByName(socket.name);
    var client = ig.game.clients[socket.name];

    // Add or remove command from entity.
    if (action === 'add') {
      entity.commands[command] = true;
    } else if (action === 'remove') {
      delete entity.commands[command];
    }
  });


  socket.on('disconnect', function() {
    console.log(players);
    players = players.filter(player => player !== socket.id);
    console.log(players);
  });
});
